{"ast":null,"code":"import React,{useState}from\"react\";import'./EditableSpan.css';import{TextField}from\"@mui/material\";import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const EditableSpan=_ref=>{let{title,isDone,onChange}=_ref;const[editMode,setEditMode]=useState(true);let[newValue,setnewValue]=useState('');const activateEditMode=()=>{setEditMode(false);setnewValue(title);};const activateViewMode=()=>{setEditMode(true);onChange(newValue);};const changeValueHandler=e=>setnewValue(e.target.value);return/*#__PURE__*/_jsx(_Fragment,{children:editMode?/*#__PURE__*/_jsx(\"span\",{onDoubleClick:activateEditMode,className:isDone?'is-done':'',children:isDone?/*#__PURE__*/_jsx(\"del\",{children:title}):title}):/*#__PURE__*/_jsx(TextField,{value:newValue,variant:\"standard\",onChange:changeValueHandler,onBlur:activateViewMode// событие onBlur возникает при потере элемента из фокуса\n,autoFocus:true})});};export default EditableSpan;","map":{"version":3,"names":["React","useState","TextField","jsx","_jsx","Fragment","_Fragment","EditableSpan","_ref","title","isDone","onChange","editMode","setEditMode","newValue","setnewValue","activateEditMode","activateViewMode","changeValueHandler","e","target","value","children","onDoubleClick","className","variant","onBlur","autoFocus"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/components/EditableSpan/EditableSpan.tsx"],"sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\nimport './EditableSpan.css'\nimport { TextField } from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title:string\n    isDone:boolean\n    onChange:(newValue:string)=>void\n}\n\nconst EditableSpan = ({title, isDone,onChange}:EditableSpanPropsType) =>{\n    const [editMode, setEditMode] = useState(true)\n    let [newValue, setnewValue] = useState('')\n    const activateEditMode = ()  => {\n        setEditMode(false)\n        setnewValue(title)\n    }\n    const activateViewMode = ()  => {\n        setEditMode(true)\n        onChange(newValue)\n    }\n    \n    const changeValueHandler = (e:ChangeEvent<HTMLInputElement>) => setnewValue(e.target.value)\n    \n\n    return (\n        <>\n            {\n                editMode ? \n                <span \n                onDoubleClick={activateEditMode}\n                className={isDone ? 'is-done' : ''}>\n                    {\n                        isDone ? <del>{title}</del> \n                        : title\n                    }\n                </span>  \n                :\n                <TextField\n                value={newValue} \n                variant=\"standard\"\n                onChange={changeValueHandler}\n                onBlur={activateViewMode}// событие onBlur возникает при потере элемента из фокуса\n                autoFocus/>\n            }\n        </>\n    )\n}\n\nexport default EditableSpan\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAiBC,QAAQ,KAAQ,OAAO,CACpD,MAAO,oBAAoB,CAC3B,OAASC,SAAS,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAQ1C,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAmD,IAAlD,CAACC,KAAK,CAAEC,MAAM,CAACC,QAA8B,CAAC,CAAAH,IAAA,CAChE,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAC9C,GAAI,CAACa,QAAQ,CAAEC,WAAW,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAAAe,gBAAgB,CAAGA,CAAA,GAAO,CAC5BH,WAAW,CAAC,KAAK,CAAC,CAClBE,WAAW,CAACN,KAAK,CAAC,CACtB,CAAC,CACD,KAAM,CAAAQ,gBAAgB,CAAGA,CAAA,GAAO,CAC5BJ,WAAW,CAAC,IAAI,CAAC,CACjBF,QAAQ,CAACG,QAAQ,CAAC,CACtB,CAAC,CAED,KAAM,CAAAI,kBAAkB,CAAIC,CAA+B,EAAKJ,WAAW,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAG3F,mBACIjB,IAAA,CAAAE,SAAA,EAAAgB,QAAA,CAEQV,QAAQ,cACRR,IAAA,SACAmB,aAAa,CAAEP,gBAAiB,CAChCQ,SAAS,CAAEd,MAAM,CAAG,SAAS,CAAG,EAAG,CAAAY,QAAA,CAE3BZ,MAAM,cAAGN,IAAA,QAAAkB,QAAA,CAAMb,KAAK,CAAM,CAAC,CACzBA,KAAK,CAET,CAAC,cAEPL,IAAA,CAACF,SAAS,EACVmB,KAAK,CAAEP,QAAS,CAChBW,OAAO,CAAC,UAAU,CAClBd,QAAQ,CAAEO,kBAAmB,CAC7BQ,MAAM,CAAET,gBAAiB;AAAA,CACzBU,SAAS,MAAC,CAAC,CAEjB,CAAC,CAEX,CAAC,CAED,cAAe,CAAApB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}