{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/components/EditableSpan/EditableSpan.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './EditableSpan.css';\nimport { TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditableSpan = ({\n  title,\n  isDone,\n  onChange\n}) => {\n  _s();\n  const [editMode, setEditMode] = useState(true);\n  let [newValue, setnewValue] = useState('');\n  const activateEditMode = () => {\n    setEditMode(false);\n    setnewValue(title);\n  };\n  const activateViewMode = () => {\n    setEditMode(true);\n    onChange(newValue);\n  };\n  const changeValueHandler = e => setnewValue(e.target.value);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: editMode ? /*#__PURE__*/_jsxDEV(\"span\", {\n      onDoubleClick: activateEditMode,\n      className: isDone ? 'is-done' : '',\n      children: isDone ? /*#__PURE__*/_jsxDEV(\"del\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 34\n      }, this) : title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n      value: newValue,\n      variant: \"standard\",\n      onChange: changeValueHandler,\n      onBlur: activateViewMode // событие onBlur возникает при потере элемента из фокуса\n      ,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(EditableSpan, \"XKMIqEU0Z7WYKKYdv3PFLdHCf3w=\");\n_c = EditableSpan;\nexport default EditableSpan;\nvar _c;\n$RefreshReg$(_c, \"EditableSpan\");","map":{"version":3,"names":["React","useState","TextField","jsxDEV","_jsxDEV","Fragment","_Fragment","EditableSpan","title","isDone","onChange","_s","editMode","setEditMode","newValue","setnewValue","activateEditMode","activateViewMode","changeValueHandler","e","target","value","children","onDoubleClick","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onBlur","autoFocus","_c","$RefreshReg$"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/components/EditableSpan/EditableSpan.tsx"],"sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\nimport './EditableSpan.css'\nimport { TextField } from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title:string\n    isDone:boolean\n    onChange:(newValue:string)=>void\n}\n\nconst EditableSpan = ({title, isDone,onChange}:EditableSpanPropsType) =>{\n    const [editMode, setEditMode] = useState(true)\n    let [newValue, setnewValue] = useState('')\n    const activateEditMode = ()  => {\n        setEditMode(false)\n        setnewValue(title)\n    }\n    const activateViewMode = ()  => {\n        setEditMode(true)\n        onChange(newValue)\n    }\n    \n    const changeValueHandler = (e:ChangeEvent<HTMLInputElement>) => setnewValue(e.target.value)\n    \n\n    return (\n        <>\n            {\n                editMode ? \n                <span \n                onDoubleClick={activateEditMode}\n                className={isDone ? 'is-done' : ''}>\n                    {\n                        isDone ? <del>{title}</del> \n                        : title\n                    }\n                </span>  \n                :\n                <TextField\n                value={newValue} \n                variant=\"standard\"\n                onChange={changeValueHandler}\n                onBlur={activateViewMode}// событие onBlur возникает при потере элемента из фокуса\n                autoFocus/>\n            }\n        </>\n    )\n}\n\nexport default EditableSpan\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,QAAQ,QAAQ,OAAO;AACpD,OAAO,oBAAoB;AAC3B,SAASC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQ1C,MAAMC,YAAY,GAAGA,CAAC;EAACC,KAAK;EAAEC,MAAM;EAACC;AAA8B,CAAC,KAAI;EAAAC,EAAA;EACpE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,IAAI,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMe,gBAAgB,GAAGA,CAAA,KAAO;IAC5BH,WAAW,CAAC,KAAK,CAAC;IAClBE,WAAW,CAACP,KAAK,CAAC;EACtB,CAAC;EACD,MAAMS,gBAAgB,GAAGA,CAAA,KAAO;IAC5BJ,WAAW,CAAC,IAAI,CAAC;IACjBH,QAAQ,CAACI,QAAQ,CAAC;EACtB,CAAC;EAED,MAAMI,kBAAkB,GAAIC,CAA+B,IAAKJ,WAAW,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAG3F,oBACIjB,OAAA,CAAAE,SAAA;IAAAgB,QAAA,EAEQV,QAAQ,gBACRR,OAAA;MACAmB,aAAa,EAAEP,gBAAiB;MAChCQ,SAAS,EAAEf,MAAM,GAAG,SAAS,GAAG,EAAG;MAAAa,QAAA,EAE3Bb,MAAM,gBAAGL,OAAA;QAAAkB,QAAA,EAAMd;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACzBpB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAET,CAAC,gBAEPxB,OAAA,CAACF,SAAS;MACVmB,KAAK,EAAEP,QAAS;MAChBe,OAAO,EAAC,UAAU;MAClBnB,QAAQ,EAAEQ,kBAAmB;MAC7BY,MAAM,EAAEb,gBAAiB;MAAA;MACzBc,SAAS;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBAEjB,CAAC;AAEX,CAAC;AAAAjB,EAAA,CArCKJ,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAuClB,eAAeA,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}