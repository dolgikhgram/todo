{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './components/Todolist/Todolist/Todolist';\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: 'CSS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'JS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'React',\n    isDone: false\n  }, {\n    id: v1(),\n    title: 'Redux',\n    isDone: false\n  }]);\n  let [filter, setFilter] = useState(\"all\");\n  let [newTask, setNewTask] = useState('');\n  const CreateNewTask = value => {\n    setNewTask(value);\n  };\n  const addNewTask = () => {\n    tasks.push({\n      id: v1(),\n      title: newTask,\n      isDone: false\n    });\n  };\n  let tasksForToDoList = tasks;\n  if (filter === \"completed\") {\n    tasksForToDoList = tasks.filter(t => {\n      return t.isDone === true;\n    });\n  }\n  if (filter === \"active\") {\n    tasksForToDoList = tasks.filter(t => {\n      return t.isDone === false;\n    });\n  }\n  let removeTask = id => {\n    setTasks(tasks = tasks.filter(t => {\n      return t.id !== id;\n    }));\n  };\n  let changeFilter = filter => {\n    setFilter(filter);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: 'What to learn',\n      tasks: tasksForToDoList,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      CreateNewTask: CreateNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lsYgE+N1szLkgq0BHOfFf2LIKOI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","id","title","isDone","filter","setFilter","newTask","setNewTask","CreateNewTask","value","addNewTask","push","tasksForToDoList","t","removeTask","changeFilter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { TaskType, Todolist } from './components/Todolist/Todolist/Todolist';\nimport { v1 } from 'uuid';\n\nexport type FilterValuesType =\"all\" | \"completed\" | \"active\"\n\nfunction App() {\n  let [tasks,setTasks]=useState< Array <TaskType> >([\n    {id:v1(), title:'CSS', isDone:true},\n    {id:v1(), title:'JS', isDone:true},\n    {id:v1(), title:'React', isDone:false},\n    {id:v1(), title:'Redux', isDone:false}\n  ])\n  let [filter,setFilter] = useState<FilterValuesType>(\"all\")\n\n  let [newTask,setNewTask] = useState('')\n  const CreateNewTask = (value:string)=>{\n    setNewTask(value)\n  }\n\n  const addNewTask= () =>{\n    tasks.push({id:v1(), title: newTask, isDone:false})\n  }\n\n  let tasksForToDoList = tasks\n  if(filter===\"completed\"){\n    tasksForToDoList=tasks.filter((t:TaskType)=>{return t.isDone===true})\n  }\n\n  if(filter===\"active\"){\n    tasksForToDoList=tasks.filter((t:TaskType)=>{return t.isDone===false})\n  }\n  \n  let removeTask = (id:string)=>{\n    setTasks(tasks=tasks.filter((t:TaskType) => {return (t.id!==id)}))\n  }\n\n  let changeFilter = (filter:FilterValuesType)=>{\n    setFilter(filter)\n  }\n  return (\n    <div className=\"App\">\n      <Todolist title={'What to learn'} \n        tasks={tasksForToDoList} \n        removeTask={removeTask}\n        changeFilter={changeFilter}\n        CreateNewTask={CreateNewTask}/>\n    </div>\n  );\n}\n\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,SAAmBC,QAAQ,QAAQ,yCAAyC;AAC5E,SAASC,EAAE,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAI,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACR,QAAQ,CAAqB,CAChD;IAACS,EAAE,EAACP,EAAE,CAAC,CAAC;IAAEQ,KAAK,EAAC,KAAK;IAAEC,MAAM,EAAC;EAAI,CAAC,EACnC;IAACF,EAAE,EAACP,EAAE,CAAC,CAAC;IAAEQ,KAAK,EAAC,IAAI;IAAEC,MAAM,EAAC;EAAI,CAAC,EAClC;IAACF,EAAE,EAACP,EAAE,CAAC,CAAC;IAAEQ,KAAK,EAAC,OAAO;IAAEC,MAAM,EAAC;EAAK,CAAC,EACtC;IAACF,EAAE,EAACP,EAAE,CAAC,CAAC;IAAEQ,KAAK,EAAC,OAAO;IAAEC,MAAM,EAAC;EAAK,CAAC,CACvC,CAAC;EACF,IAAI,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGb,QAAQ,CAAmB,KAAK,CAAC;EAE1D,IAAI,CAACc,OAAO,EAACC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAMgB,aAAa,GAAIC,KAAY,IAAG;IACpCF,UAAU,CAACE,KAAK,CAAC;EACnB,CAAC;EAED,MAAMC,UAAU,GAAEA,CAAA,KAAK;IACrBX,KAAK,CAACY,IAAI,CAAC;MAACV,EAAE,EAACP,EAAE,CAAC,CAAC;MAAEQ,KAAK,EAAEI,OAAO;MAAEH,MAAM,EAAC;IAAK,CAAC,CAAC;EACrD,CAAC;EAED,IAAIS,gBAAgB,GAAGb,KAAK;EAC5B,IAAGK,MAAM,KAAG,WAAW,EAAC;IACtBQ,gBAAgB,GAACb,KAAK,CAACK,MAAM,CAAES,CAAU,IAAG;MAAC,OAAOA,CAAC,CAACV,MAAM,KAAG,IAAI;IAAA,CAAC,CAAC;EACvE;EAEA,IAAGC,MAAM,KAAG,QAAQ,EAAC;IACnBQ,gBAAgB,GAACb,KAAK,CAACK,MAAM,CAAES,CAAU,IAAG;MAAC,OAAOA,CAAC,CAACV,MAAM,KAAG,KAAK;IAAA,CAAC,CAAC;EACxE;EAEA,IAAIW,UAAU,GAAIb,EAAS,IAAG;IAC5BD,QAAQ,CAACD,KAAK,GAACA,KAAK,CAACK,MAAM,CAAES,CAAU,IAAK;MAAC,OAAQA,CAAC,CAACZ,EAAE,KAAGA,EAAE;IAAC,CAAC,CAAC,CAAC;EACpE,CAAC;EAED,IAAIc,YAAY,GAAIX,MAAuB,IAAG;IAC5CC,SAAS,CAACD,MAAM,CAAC;EACnB,CAAC;EACD,oBACER,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBrB,OAAA,CAACH,QAAQ;MAACS,KAAK,EAAE,eAAgB;MAC/BH,KAAK,EAAEa,gBAAiB;MACxBE,UAAU,EAAEA,UAAW;MACvBC,YAAY,EAAEA,YAAa;MAC3BP,aAAa,EAAEA;IAAc;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACvB,EAAA,CA3CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}