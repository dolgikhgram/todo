{"ast":null,"code":"import { v1 } from \"uuid\";\nexport const tasksReducer = (state, action) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      {\n        const stateCopy = {\n          ...state\n        };\n        const tasks = stateCopy[action.todolistId];\n        const filteredTasks = tasks.filter(t => t.id !== action.taskId);\n        stateCopy[action.todolistId] = filteredTasks;\n        return {\n          ...stateCopy\n        };\n      }\n    case 'ADD-TASK':\n      {\n        if (action.title.trim().length !== 0) {\n          const stateCopy = {\n            ...state\n          };\n          const tasks = stateCopy[action.todolistId];\n          const newTask = {\n            id: v1(),\n            title: action.title,\n            isDone: false\n          };\n          const newTasks = [newTask, ...tasks];\n          stateCopy[action.todolistId] = newTasks;\n          return stateCopy;\n        }\n        return {\n          ...state\n        };\n      }\n    case 'CHANGE-CHEKED-TASK':\n      {\n        let copyState = {\n          ...state\n        };\n        copyState[action.todolistId].map(el => {\n          if (el.id === action.taskId) {\n            if (el) {\n              el.isDone = !el.isDone;\n              console.log(el);\n            }\n          }\n          return el;\n        });\n        return copyState;\n      }\n    case 'CHANGE-TASK-TITLE':\n      {\n        const copyState = {\n          ...state\n        };\n        if (action.title.trim().length !== 0) {\n          copyState[action.todolistId].map(el => {\n            if (el.id === action.taskId) {\n              el.title = action.title;\n            }\n          });\n        }\n        return {\n          ...copyState\n        };\n      }\n    case 'ADD-TOODOLIST':\n      {\n        const stateCopy = {\n          ...state\n        };\n        stateCopy[action.todolistId] = [];\n        return stateCopy;\n      }\n    case 'REMOVE-TODOLIST':\n      {\n        const stateCopy = {\n          ...state\n        };\n        delete stateCopy[action.id];\n        return stateCopy;\n      }\n    default:\n      throw new Error(\"I don't understand this action type\");\n  }\n};\nexport const removeTaskAC = (todolistId, taskId) => {\n  return {\n    type: 'REMOVE-TASK',\n    todolistId: todolistId,\n    taskId: taskId\n  };\n};\nexport const addTaskAC = (todolistId, title) => {\n  return {\n    type: 'ADD-TASK',\n    todolistId: todolistId,\n    title: title\n  };\n};\nexport const changeCheckedTaskAC = (todolistId, taskId, isChecked) => {\n  return {\n    type: 'CHANGE-CHEKED-TASK',\n    todolistId,\n    taskId,\n    isChecked\n  };\n};\nexport const changeTaskTitleAC = (todolistId, taskId, title) => {\n  return {\n    type: 'CHANGE-TASK-TITLE',\n    todolistId: todolistId,\n    taskId: taskId,\n    title: title\n  };\n};","map":{"version":3,"names":["v1","tasksReducer","state","action","type","stateCopy","tasks","todolistId","filteredTasks","filter","t","id","taskId","title","trim","length","newTask","isDone","newTasks","copyState","map","el","console","log","Error","removeTaskAC","addTaskAC","changeCheckedTaskAC","isChecked","changeTaskTitleAC"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/state/tasks-reducer.tsx"],"sourcesContent":["import { v1 } from \"uuid\"\nimport { AddTodolistActionType, RemoveTodolistActionType } from \"./todolists-reducer\"\nimport { TaskStateType } from \"../App\"\n\nexport type  ActionRemoveTaskType={\n    type: 'REMOVE-TASK'\n    todolistId:string\n    taskId:string\n}\n\nexport type ActionAddTaskType = {\n    type: 'ADD-TASK'\n    todolistId:string\n    title:string\n}\n\nexport type ChangeCheckedTaskActionType = {\n    type: 'CHANGE-CHEKED-TASK'\n    todolistId:string\n    taskId:string;\n    isChecked: boolean\n}\n\nexport type ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE'\n    todolistId:string, \n    taskId:string, \n    title:string\n}\n\n\nexport type ActionsTypes  = ActionRemoveTaskType |  ActionAddTaskType |  ChangeCheckedTaskActionType | ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\n\nexport const tasksReducer = (state: TaskStateType, action: ActionsTypes): TaskStateType => {\n    switch(action.type){\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.todolistId]\n            const filteredTasks = tasks.filter(t=>t.id!== action.taskId)\n            stateCopy[action.todolistId]=filteredTasks\n            return {...stateCopy}\n        }\n        case 'ADD-TASK':{\n            if(action.title.trim().length!==0){\n                const stateCopy = {...state}\n                const tasks = stateCopy[action.todolistId]\n                const newTask = {id:v1(), title:action.title, isDone:false}\n                const newTasks = [newTask,...tasks]\n                stateCopy[action.todolistId]=newTasks\n                return stateCopy\n            }\n            return {...state}\n        }\n        case 'CHANGE-CHEKED-TASK':{\n            let copyState ={...state}\n            copyState[action.todolistId].map((el)=>{\n                if(el.id===action.taskId){\n                    if (el) {\n                        el.isDone= !el.isDone\n                        console.log(el)\n                    }\n                }\n                return el\n            })\n\n\n            return copyState\n        }\n        case 'CHANGE-TASK-TITLE':{\n            const copyState  = {...state}\n            if(action.title.trim().length!==0){\n                copyState[action.todolistId].map((el)=>{\n                    if (el.id===action.taskId){\n                    el.title=action.title\n                    }\n                })\n            }\n            return {...copyState}\n        }\n\n        case  'ADD-TOODOLIST':{\n            const stateCopy = {...state}\n            stateCopy[action.todolistId]=[]\n            return stateCopy\n        }\n\n        case 'REMOVE-TODOLIST' : {\n            const stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        default:\n            throw new Error(\"I don't understand this action type\")\n    }\n}\n\nexport const removeTaskAC  = (todolistId:string, taskId:string):ActionRemoveTaskType =>{\n    return { type:'REMOVE-TASK', todolistId: todolistId, taskId: taskId}\n}\n\nexport const addTaskAC = (todolistId:string, title:string):ActionAddTaskType =>{\n    return {type: 'ADD-TASK',todolistId: todolistId , title:title}\n}\n\nexport const changeCheckedTaskAC = (todolistId:string, taskId:string, isChecked: boolean):ChangeCheckedTaskActionType =>{\n    return {type: 'CHANGE-CHEKED-TASK',todolistId , taskId, isChecked}\n}\n\nexport const  changeTaskTitleAC = (todolistId:string, taskId:string, title:string):ChangeTaskTitleActionType =>{\n    return {type: 'CHANGE-TASK-TITLE',todolistId: todolistId , taskId:taskId, title:title}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}