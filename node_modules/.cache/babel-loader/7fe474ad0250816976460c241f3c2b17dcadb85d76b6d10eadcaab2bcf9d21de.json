{"ast":null,"code":"import { v1 } from \"uuid\";\nexport const todolistsReducer = (state, action) => {\n  switch (action.type) {\n    case 'REMOVE-TODOLIST':\n      return [...state.filter(t => {\n        return t.id !== action.id;\n      })];\n    case 'ADD-TOODOLIST':\n      return [{\n        id: action.todolistId,\n        title: action.title,\n        filter: 'all'\n      }, ...state];\n    case 'CHANGE-TODOLIST-TITLE':\n      if (action.title.trim().length !== 0) {\n        state.map(el => {\n          if (el.id === action.id) {\n            el.title = action.title;\n          }\n        });\n      }\n      return [...state];\n    case 'CHANGE-NEW-FILTER':\n      state.map(e => {\n        if (e.id === action.id) {\n          e.filter = action.filter;\n        }\n      });\n      return [...state];\n    default:\n      throw new Error(\"I don't understand this action type\");\n  }\n};\nexport const removeTodolistAC = todolistId => {\n  return {\n    type: 'REMOVE-TODOLIST',\n    id: todolistId\n  };\n};\nexport const addTodolistAC = title => {\n  return {\n    type: 'ADD-TOODOLIST',\n    title: title,\n    todolistId: v1()\n  };\n};\nexport const changeTodolistTitleAC = (todolistId, title) => {\n  return {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: todolistId,\n    title: title\n  };\n};\nexport const changeNewFilterAC = (todolistId, filter) => {\n  return {\n    type: 'CHANGE-NEW-FILTER',\n    id: todolistId,\n    filter: filter\n  };\n};","map":{"version":3,"names":["v1","todolistsReducer","state","action","type","filter","t","id","todolistId","title","trim","length","map","el","e","Error","removeTodolistAC","addTodolistAC","changeTodolistTitleAC","changeNewFilterAC"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/state/todolists-reducer.ts"],"sourcesContent":["import { v1 } from \"uuid\"\nimport { FilterValuesType, TodolistType } from \"../App\"\n\nexport type  RemoveTodolistActionType={\n    type: 'REMOVE-TODOLIST'\n    id:string\n}\n\nexport type AddTodolistActionType = {\n    type: 'ADD-TOODOLIST'\n    title:string\n    todolistId:string\n}\n\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    id:string\n    title:string\n}\n\nexport type ChangeNewFilterActionType = {\n    type: 'CHANGE-NEW-FILTER'\n    id:string\n    filter:FilterValuesType\n}\n\nexport type ActionsTypes  = RemoveTodolistActionType | ChangeTodolistTitleActionType | ChangeNewFilterActionType | AddTodolistActionType\n\nexport const todolistsReducer = (state: Array <TodolistType>, action: ActionsTypes): Array <TodolistType>  => {\n    switch(action.type){\n        case 'REMOVE-TODOLIST' :\n            return [...state.filter((t) => {return (t.id!==action.id)})]\n        case 'ADD-TOODOLIST' :\n            return [{ \n                id:action.todolistId,\n                title: action.title,\n                filter:'all'\n            },...state]\n        case 'CHANGE-TODOLIST-TITLE' :\n            if(action.title.trim().length!==0){\n                state.map((el)=>{\n                if (el.id===action.id){\n                    el.title=action.title\n                }\n                })\n            }\n            return [...state]\n        case 'CHANGE-NEW-FILTER' :\n            state.map((e) => {\n                if (e.id ===action.id){\n                    e.filter = action.filter\n                }\n            })\n            return [...state]\n        default:\n            throw new Error(\"I don't understand this action type\")\n    }\n}\n\nexport const removeTodolistAC  = (todolistId:string):RemoveTodolistActionType =>{\n    return { type:'REMOVE-TODOLIST', id: todolistId}\n}\n\nexport const addTodolistAC = (title:string):AddTodolistActionType =>{\n    return {type: 'ADD-TOODOLIST', title:title, todolistId:v1()}\n}\n\nexport const changeTodolistTitleAC = (todolistId:string, title:string):ChangeTodolistTitleActionType =>{\n    return {type: 'CHANGE-TODOLIST-TITLE',id: todolistId , title:title}\n}\n\nexport const changeNewFilterAC = (todolistId:string,  filter:FilterValuesType):ChangeNewFilterActionType =>{\n    return {type: 'CHANGE-NEW-FILTER',id: todolistId , filter:filter}\n}"],"mappings":"AAAA,SAASA,EAAE,QAAQ,MAAM;AA4BzB,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,KAA2B,EAAEC,MAAoB,KAA4B;EAC1G,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,iBAAiB;MAClB,OAAO,CAAC,GAAGF,KAAK,CAACG,MAAM,CAAEC,CAAC,IAAK;QAAC,OAAQA,CAAC,CAACC,EAAE,KAAGJ,MAAM,CAACI,EAAE;MAAC,CAAC,CAAC,CAAC;IAChE,KAAK,eAAe;MAChB,OAAO,CAAC;QACJA,EAAE,EAACJ,MAAM,CAACK,UAAU;QACpBC,KAAK,EAAEN,MAAM,CAACM,KAAK;QACnBJ,MAAM,EAAC;MACX,CAAC,EAAC,GAAGH,KAAK,CAAC;IACf,KAAK,uBAAuB;MACxB,IAAGC,MAAM,CAACM,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,KAAG,CAAC,EAAC;QAC9BT,KAAK,CAACU,GAAG,CAAEC,EAAE,IAAG;UAChB,IAAIA,EAAE,CAACN,EAAE,KAAGJ,MAAM,CAACI,EAAE,EAAC;YAClBM,EAAE,CAACJ,KAAK,GAACN,MAAM,CAACM,KAAK;UACzB;QACA,CAAC,CAAC;MACN;MACA,OAAO,CAAC,GAAGP,KAAK,CAAC;IACrB,KAAK,mBAAmB;MACpBA,KAAK,CAACU,GAAG,CAAEE,CAAC,IAAK;QACb,IAAIA,CAAC,CAACP,EAAE,KAAIJ,MAAM,CAACI,EAAE,EAAC;UAClBO,CAAC,CAACT,MAAM,GAAGF,MAAM,CAACE,MAAM;QAC5B;MACJ,CAAC,CAAC;MACF,OAAO,CAAC,GAAGH,KAAK,CAAC;IACrB;MACI,MAAM,IAAIa,KAAK,CAAC,qCAAqC,CAAC;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAKR,UAAiB,IAA6B;EAC5E,OAAO;IAAEJ,IAAI,EAAC,iBAAiB;IAAEG,EAAE,EAAEC;EAAU,CAAC;AACpD,CAAC;AAED,OAAO,MAAMS,aAAa,GAAIR,KAAY,IAA0B;EAChE,OAAO;IAACL,IAAI,EAAE,eAAe;IAAEK,KAAK,EAACA,KAAK;IAAED,UAAU,EAACR,EAAE,CAAC;EAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMkB,qBAAqB,GAAGA,CAACV,UAAiB,EAAEC,KAAY,KAAkC;EACnG,OAAO;IAACL,IAAI,EAAE,uBAAuB;IAACG,EAAE,EAAEC,UAAU;IAAGC,KAAK,EAACA;EAAK,CAAC;AACvE,CAAC;AAED,OAAO,MAAMU,iBAAiB,GAAGA,CAACX,UAAiB,EAAGH,MAAuB,KAA8B;EACvG,OAAO;IAACD,IAAI,EAAE,mBAAmB;IAACG,EAAE,EAAEC,UAAU;IAAGH,MAAM,EAACA;EAAM,CAAC;AACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}