{"ast":null,"code":"import React,{useCallback}from'react';import'./Todolist.css';import AddNewTask from'../../AddNewTask/AddNewTask';import DeleteIcon from'@mui/icons-material/Delete';import EditableSpan from'../../EditableSpan/EditableSpan';import{Button,Checkbox,IconButton,Typography,Box,Grid2}from'@mui/material';import{useSelector}from'react-redux';import{useDispatch}from'react-redux';import RadioButtonUncheckedIcon from'@mui/icons-material/RadioButtonUnchecked';import{addTaskAC,changeCheckedTaskAC,changeTaskTitleAC,removeTaskAC,removeTaskCompletedAC}from'../../../state/tasks-reducer';import CheckCircleOutlineSharpIcon from'@mui/icons-material/CheckCircleOutlineSharp';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const Todolist=/*#__PURE__*/React.memo(_ref=>{let{title,changeFilter,filter,id,removeTodolist,changeTodolistTitle}=_ref;const dispatch=useDispatch();const tasks=useSelector(state=>state.tasks);let count=0;const changeFilterAllHandler=()=>{changeFilter('all',id);};const changeFilterActiveHandler=()=>{changeFilter('active',id);};const deleteCompletedTaskHandler=()=>{dispatch(removeTaskCompletedAC(id));};const changeFilterCompletedHandler=()=>{changeFilter('completed',id);};const deleteTaskHandler=()=>{removeTodolist(id);};const addTask=useCallback(title=>{dispatch(addTaskAC(id,title));},[]);const onChangeTodolistTitelHandler=newValue=>{changeTodolistTitle(id,newValue);};let allTodolistTasks=tasks[id];let tasksForToDoList=allTodolistTasks;if(filter===\"completed\"){tasksForToDoList=allTodolistTasks.filter(t=>{return t.isDone===true;});}if(filter===\"active\"){tasksForToDoList=allTodolistTasks.filter(t=>{return t.isDone===false;});}tasksForToDoList.map(el=>{if(!el.isDone)count++;});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Box,{className:\"border-todolist-name\",children:/*#__PURE__*/_jsx(Box,{ml:1.5,className:\"name-container\",children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:/*#__PURE__*/_jsx(EditableSpan,{title:title,isDone:false,onChange:onChangeTodolistTitelHandler})})})}),/*#__PURE__*/_jsx(Box,{ml:1.5,children:/*#__PURE__*/_jsx(AddNewTask,{addItem:addTask})}),tasksForToDoList.map(task=>{const removeTaskHandler=()=>{dispatch(removeTaskAC(id,task.id));};const changeCheckedHandler=e=>{dispatch(changeCheckedTaskAC(id,task.id,e.target.checked));};const onChangeTaskTitleHandler=newValue=>{dispatch(changeTaskTitleAC(id,task.id,newValue));};return/*#__PURE__*/_jsxs(Box,{className:\"task-container\",children:[/*#__PURE__*/_jsx(Checkbox,{icon:/*#__PURE__*/_jsx(RadioButtonUncheckedIcon,{}),checkedIcon:/*#__PURE__*/_jsx(CheckCircleOutlineSharpIcon,{}),color:\"success\",checked:task.isDone,onClick:e=>changeCheckedHandler(e)}),/*#__PURE__*/_jsx(EditableSpan,{title:task.title,isDone:task.isDone,onChange:onChangeTaskTitleHandler})]},task.id);}),/*#__PURE__*/_jsx(\"div\",{className:\"filters-container\",children:/*#__PURE__*/_jsx(Box,{mt:0.5,children:/*#__PURE__*/_jsxs(Grid2,{container:true,spacing:1.5,children:[/*#__PURE__*/_jsxs(Box,{mt:1.5,ml:2,children:[count,\" items left\"]}),/*#__PURE__*/_jsxs(Box,{mt:1,ml:1,children:[/*#__PURE__*/_jsx(Button,{onClick:changeFilterAllHandler,size:\"small\",color:\"secondary\",variant:filter==='all'?'outlined':'text',children:\"All\"}),/*#__PURE__*/_jsx(Button,{onClick:changeFilterActiveHandler,size:\"small\",color:\"secondary\",variant:filter==='active'?'outlined':'text',children:\"Active\"}),/*#__PURE__*/_jsx(Button,{onClick:changeFilterCompletedHandler,size:\"small\",color:\"secondary\",variant:filter==='completed'?'outlined':'text',children:\"Completed\"})]}),/*#__PURE__*/_jsx(Box,{mb:1,ml:1,children:/*#__PURE__*/_jsxs(IconButton,{onClick:deleteCompletedTaskHandler,children:[/*#__PURE__*/_jsx(DeleteIcon,{fontSize:\"small\"}),/*#__PURE__*/_jsx(Typography,{children:\"Clear completed\"})]})})]})})})]});});","map":{"version":3,"names":["React","useCallback","AddNewTask","DeleteIcon","EditableSpan","Button","Checkbox","IconButton","Typography","Box","Grid2","useSelector","useDispatch","RadioButtonUncheckedIcon","addTaskAC","changeCheckedTaskAC","changeTaskTitleAC","removeTaskAC","removeTaskCompletedAC","CheckCircleOutlineSharpIcon","jsx","_jsx","jsxs","_jsxs","Todolist","memo","_ref","title","changeFilter","filter","id","removeTodolist","changeTodolistTitle","dispatch","tasks","state","count","changeFilterAllHandler","changeFilterActiveHandler","deleteCompletedTaskHandler","changeFilterCompletedHandler","deleteTaskHandler","addTask","onChangeTodolistTitelHandler","newValue","allTodolistTasks","tasksForToDoList","t","isDone","map","el","children","className","ml","variant","onChange","addItem","task","removeTaskHandler","changeCheckedHandler","e","target","checked","onChangeTaskTitleHandler","icon","checkedIcon","color","onClick","mt","container","spacing","size","mb","fontSize"],"sources":["/Users/user/Documents/Projects/React:Typescript-project/Todolist/todolist-project/src/components/Todolist/Todolist/Todolist.tsx"],"sourcesContent":["import React, { useCallback} from 'react';import './Todolist.css'\nimport AddNewTask from '../../AddNewTask/AddNewTask';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditableSpan from '../../EditableSpan/EditableSpan';\nimport { Button, Checkbox, IconButton, Typography,Box, Grid2} from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { AppRootState } from '../../../state/store';\nimport { useDispatch } from 'react-redux';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';import { addTaskAC, changeCheckedTaskAC, changeTaskTitleAC, removeTaskAC, removeTaskCompletedAC } from '../../../state/tasks-reducer';\nimport CheckCircleOutlineSharpIcon from '@mui/icons-material/CheckCircleOutlineSharp';import { FilterValuesType, TaskStateType } from '../../../AppWithRedux';\nexport type TaskType = {\n    id:string\n    title:string\n    isDone:boolean\n}\ntype PropsType = {\n    title:string\n    changeFilter: (filter:FilterValuesType, todolistId:string)=> void\n    filter:FilterValuesType\n    id:string\n    removeTodolist:(id:string)=>void\n    changeTodolistTitle:(todolistId:string, newValue:string)=>void\n}\nexport const Todolist = React.memo(({title, changeFilter,  filter, id, removeTodolist, changeTodolistTitle}:PropsType)=>{\n    const dispatch = useDispatch()\n    const tasks = useSelector<AppRootState, TaskStateType>(state=>state.tasks)\n    let count=0\n    const changeFilterAllHandler = () => {\n        changeFilter('all',id)\n    }\n    const changeFilterActiveHandler = () => {\n        changeFilter('active',id)\n    }\n    const deleteCompletedTaskHandler = () =>{\n        dispatch(removeTaskCompletedAC(id))\n    }\n    const changeFilterCompletedHandler = () => {\n        changeFilter('completed',id)\n    }\n    const deleteTaskHandler = () =>{\n        removeTodolist(id)\n    }\n    const addTask = useCallback ((title:string)=>{\n        dispatch(addTaskAC(id,title))\n    },[])\n    const onChangeTodolistTitelHandler = (newValue:string)=>{\n        changeTodolistTitle(id,newValue)\n    }\n    let allTodolistTasks = tasks[id]\n    let tasksForToDoList = allTodolistTasks\n    if(filter===\"completed\"){\n        tasksForToDoList=allTodolistTasks.filter((t:TaskType)=>{return t.isDone===true})\n    }\n    if(filter===\"active\"){\n        tasksForToDoList=allTodolistTasks.filter((t:TaskType)=>{return t.isDone===false})\n    }\n    tasksForToDoList.map((el)=>{\n        if(!el.isDone) count++\n    })\n    return (\n        <div>\n            <Box className='border-todolist-name'>\n                <Box ml={1.5} className='name-container'>\n                    <Typography variant=\"h6\">\n                        <EditableSpan \n                            title={title} \n                            isDone={false} \n                            onChange={onChangeTodolistTitelHandler}/>\n                    </Typography>\n                    {/* <IconButton onClick={deleteTaskHandler}>\n                        <DeleteIcon  fontSize=\"small\" />\n                    </IconButton> */}\n                </Box>\n            </Box>\n            <Box ml={1.5}>\n                <AddNewTask addItem={addTask}/>\n            </Box>\n                {\n                    tasksForToDoList.map((task:TaskType)=>{\n                        const removeTaskHandler = () => {\n                            dispatch(removeTaskAC(id,task.id))\n                        }\n                        const changeCheckedHandler = (e:any) =>{\n                            dispatch(changeCheckedTaskAC(id,task.id, e.target.checked))\n                        }\n                        const onChangeTaskTitleHandler=(newValue:string)=>{\n                            dispatch(changeTaskTitleAC(id,task.id,newValue))\n                        }\n                        return (\n                            <Box key={task.id} className='task-container' >\n                                <Checkbox\n                                icon={<RadioButtonUncheckedIcon/>}\n                                checkedIcon={<CheckCircleOutlineSharpIcon/>}\n                                color=\"success\"\n                                checked={task.isDone}\n                                onClick={(e)=>changeCheckedHandler(e)}\n                                />\n                                <EditableSpan \n                                title={task.title} \n                                isDone={task.isDone} \n                                onChange={onChangeTaskTitleHandler}/>\n                                {/* <IconButton onClick={removeTaskHandler}>\n                                    <DeleteIcon  fontSize=\"small\" />\n                                </IconButton> */}\n                            </Box>\n                        )\n                    })\n                }\n            <div className='filters-container'>\n                <Box mt={0.5}>\n                    <Grid2 container spacing={1.5}>\n                        <Box mt={1.5} ml={2}>\n                            {count} items left\n                        </Box>\n                        <Box mt={1} ml={1}>\n                            <Button onClick={changeFilterAllHandler}\n                                size=\"small\"\n                                color='secondary' \n                                variant={filter==='all' ? 'outlined' : 'text'}>\n                                All\n                            </Button>\n                            <Button onClick={changeFilterActiveHandler}\n                                size=\"small\"\n                                color='secondary'\n                                variant={filter==='active' ? 'outlined' : 'text'}>\n                                Active\n                            </Button>\n                            <Button onClick={changeFilterCompletedHandler}\n                                size=\"small\"\n                                color=\"secondary\"\n                                variant={filter==='completed' ? 'outlined' : 'text'}>\n                                Completed\n                            </Button>\n                        </Box>\n                        <Box mb={1} ml={1}>\n                            <IconButton onClick={deleteCompletedTaskHandler}>\n                                <DeleteIcon  fontSize=\"small\" />\n                                <Typography>Clear completed</Typography>\n                            </IconButton>\n                        </Box>\n                    </Grid2>\n                </Box>\n            </div>\n        </div>\n    )\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}